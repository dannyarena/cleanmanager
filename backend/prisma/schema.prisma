generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                      String                   @id @default(cuid())
  name                    String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  slug                    String                   @unique
  checkItems              CheckItem[]
  checklists              Checklist[]
  clients                 Client[]
  shiftExceptionOperators ShiftExceptionOperator[]
  shiftExceptionSites     ShiftExceptionSite[]
  shiftExceptions         ShiftException[]
  shiftOperators          ShiftOperator[]
  shiftRecurrences        ShiftRecurrence[]
  shiftSites              ShiftSite[]
  shifts                  Shift[]
  sites                   Site[]
  settings                TenantSettings?
  users                   User[]

  @@map("tenants")
}

model TenantSettings {
  id                         String              @id @default(cuid())
  tenantId                   String              @unique
  companyName                String
  primaryColor               String?             @default("#2563eb")
  theme                      Theme               @default(LIGHT)
  workingDays                Int[]               @default([1, 2, 3, 4, 5, 6])
  recurrenceDefaultFrequency RecurrenceFrequency @default(WEEKLY)
  recurrenceDefaultInterval  Int                 @default(1)
  emailEnabled               Boolean             @default(false)
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  tenant                     Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_settings")
}

model User {
  id                 String                   @id @default(cuid())
  email              String
  password           String
  firstName          String
  lastName           String
  role               UserRole
  isManager          Boolean                  @default(false)
  tenantId           String
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  exceptionOperators ShiftExceptionOperator[]
  shiftOperators     ShiftOperator[]
  tenant             Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@index([tenantId])
  @@map("users")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sites     Site[]

  @@unique([tenantId, name])
  @@map("clients")
}

model Site {
  id             String               @id @default(cuid())
  name           String
  address        String
  clientId       String
  tenantId       String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  checklists     Checklist[]
  exceptionSites ShiftExceptionSite[]
  shiftSites     ShiftSite[]
  client         Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant         Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
  @@index([tenantId])
  @@map("sites")
}

model Shift {
  id              String           @id @default(cuid())
  title           String
  date            DateTime
  notes           String?
  tenantId        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  shiftExceptions ShiftException[]
  shiftOperators  ShiftOperator[]
  shiftRecurrence ShiftRecurrence?
  shiftSites      ShiftSite[]
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, date])
  @@index([tenantId, createdAt])
  @@map("shifts")
}

model ShiftRecurrence {
  id        String              @id @default(cuid())
  shiftId   String              @unique
  frequency RecurrenceFrequency
  interval  Int                 @default(1)
  startDate DateTime
  endDate   DateTime?
  count     Int?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  tenantId  String
  shift     Shift               @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  tenant    Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("shift_recurrence")
}

model ShiftSite {
  id       String @id @default(cuid())
  shiftId  String
  siteId   String
  tenantId String
  shift    Shift  @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  site     Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([shiftId, siteId])
  @@index([tenantId])
  @@map("shift_sites")
}

model ShiftOperator {
  id       String @id @default(cuid())
  shiftId  String
  userId   String
  tenantId String
  shift    Shift  @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([shiftId, userId])
  @@index([tenantId])
  @@map("shift_operators")
}

model Checklist {
  id         String      @id @default(cuid())
  title      String
  siteId     String
  tenantId   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  checkItems CheckItem[]
  site       Site        @relation(fields: [siteId], references: [id], onDelete: Cascade)
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("checklists")
}

model CheckItem {
  id          String    @id @default(cuid())
  title       String
  description String?
  order       Int       @default(0)
  checklistId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tenantId    String
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("check_items")
}

model ShiftException {
  id                 String                   @id @default(cuid())
  shiftId            String
  date               DateTime
  exceptionType      ExceptionType
  newTitle           String?
  newNotes           String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  newDate            DateTime?
  tenantId           String
  exceptionOperators ShiftExceptionOperator[]
  exceptionSites     ShiftExceptionSite[]
  shift              Shift                    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  tenant             Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([shiftId, date])
  @@index([date])
  @@index([tenantId])
  @@map("shift_exceptions")
}

model ShiftExceptionSite {
  id               String         @id @default(cuid())
  shiftExceptionId String
  siteId           String
  createdAt        DateTime       @default(now())
  tenantId         String
  shiftException   ShiftException @relation(fields: [shiftExceptionId], references: [id], onDelete: Cascade)
  site             Site           @relation(fields: [siteId], references: [id], onDelete: Cascade)
  tenant           Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([shiftExceptionId, siteId])
  @@index([tenantId])
  @@map("shift_exception_sites")
}

model ShiftExceptionOperator {
  id               String         @id @default(cuid())
  shiftExceptionId String
  userId           String
  createdAt        DateTime       @default(now())
  tenantId         String
  shiftException   ShiftException @relation(fields: [shiftExceptionId], references: [id], onDelete: Cascade)
  tenant           Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([shiftExceptionId, userId])
  @@index([tenantId])
  @@map("shift_exception_operators")
}

enum Theme {
  LIGHT
  DARK
}

enum UserRole {
  ADMIN
  OPERATORE
  MANAGER
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
}

enum ExceptionType {
  CANCELLED
  MODIFIED
}
