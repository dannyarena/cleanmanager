// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabella tenants (aziende)
model Tenant {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni
  users      User[]
  clients    Client[]
  sites      Site[]
  shifts     Shift[]
  checklists Checklist[]

  @@map("tenants")
}

// Tabella users (utenti con ruoli)
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  role       UserRole
  isManager  Boolean  @default(false)
  tenantId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relazioni
  tenant         Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  shiftOperators ShiftOperator[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATORE
}

// Tabella clients (anagrafiche clienti)
model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sites  Site[]

  @@map("clients")
}

// Tabella sites (sedi legate ai clienti)
model Site {
  id        String   @id @default(cuid())
  name      String
  address   String
  clientId  String
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni
  client     Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  shiftSites ShiftSite[]
  checklists Checklist[]

  @@map("sites")
}

// Tabella shifts (turni)
model Shift {
  id        String    @id @default(cuid())
  title     String
  date      DateTime
  notes     String?
  tenantId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relazioni
  tenant           Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  shiftSites       ShiftSite[]
  shiftOperators   ShiftOperator[]
  shiftRecurrence  ShiftRecurrence?
  shiftExceptions  ShiftException[]

  @@map("shifts")
}

// Tabella shift_recurrence (ricorrenze dei turni)
model ShiftRecurrence {
  id        String              @id @default(cuid())
  shiftId   String              @unique
  frequency RecurrenceFrequency
  interval  Int                 @default(1)
  startDate DateTime
  endDate   DateTime?
  count     Int?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // Relazioni
  shift Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@map("shift_recurrence")
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
}

// Tabella shift_sites (N:N tra turni e siti)
model ShiftSite {
  id      String @id @default(cuid())
  shiftId String
  siteId  String

  // Relazioni
  shift Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  site  Site  @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([shiftId, siteId])
  @@map("shift_sites")
}

// Tabella shift_operators (N:N tra turni e operatori)
model ShiftOperator {
  id       String @id @default(cuid())
  shiftId  String
  userId   String

  // Relazioni
  shift Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([shiftId, userId])
  @@map("shift_operators")
}

// Tabella checklists (template per sito)
model Checklist {
  id        String   @id @default(cuid())
  title     String
  siteId    String
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni
  site       Site        @relation(fields: [siteId], references: [id], onDelete: Cascade)
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  checkItems CheckItem[]

  @@map("checklists")
}

// Tabella check_items (voci della checklist)
model CheckItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @default(0)
  checklistId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni
  checklist Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  @@map("check_items")
}

// Tabella shift_exceptions (eccezioni/override per ricorrenze)
model ShiftException {
  id           String            @id @default(cuid())
  shiftId      String
  date         DateTime
  exceptionType ExceptionType
  newTitle     String?
  newNotes     String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relazioni
  shift Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@unique([shiftId, date])
  @@map("shift_exceptions")
}

enum ExceptionType {
  CANCELLED
  MODIFIED
}
